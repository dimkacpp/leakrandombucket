#include "pcapread_test.h"

#include <boost/test/unit_test.hpp>
#include <iostream>
#include "pcapreader.h"
#include "randpool.h"

using namespace sim;

BOOST_AUTO_TEST_SUITE(MAINTOOL)


BOOST_AUTO_TEST_CASE( randpool_add )
{
  using namespace sim;

  sim::RandPool randpool;

  unsigned char header_bytes[] = {
      0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
      0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
      0x4f, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00
  };

  unsigned char data_bytes[] = {
    0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
    0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
    0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
    0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
    0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
    0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
    0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
    0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
    0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
    0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
  };


  randpool.addPacket((struct pcap_pkthdr*)header_bytes, data_bytes);

  BOOST_TEST( !randpool.empty() );
}

BOOST_AUTO_TEST_CASE( randpool_addfail )
{
  using namespace sim;

  sim::RandPool randpool;

  bool errorinadd = false;

  try {

      unsigned char header_bytes[] = {
          0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
          0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
          0x4f, 0x00, 0x00, 0x01, 0x4f, 0x00, 0x00, 0x01
      };

      unsigned char data_bytes[] = {
        0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
        0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
        0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
        0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
        0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
        0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
        0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
        0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
        0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
        0x88, 0x65, 0xfd, 0x5f, 0x7c, 0x66, 0x0b, 0x00,
      };

      randpool.addPacket((struct pcap_pkthdr*)header_bytes, data_bytes);
  }
  catch(...) {
       errorinadd = true;
  }

  BOOST_TEST( errorinadd );
}


BOOST_AUTO_TEST_CASE( randpool_process )
{
  using namespace sim;

  sim::RandPool randpool;
  sim::PcapReader pcap_reader;

  bool reslt = pcap_reader.processFile("wrong.pcap", "final.pcap", randpool, 0.5);

  BOOST_TEST( !reslt );
}

BOOST_AUTO_TEST_SUITE_END()
